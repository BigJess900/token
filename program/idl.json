{
  "kind": "rootNode",
  "program": {
    "kind": "programNode",
    "pdas": [],
    "accounts": [
      {
        "kind": "accountNode",
        "data": {
          "kind": "structTypeNode",
          "fields": [
            {
              "kind": "structFieldTypeNode",
              "name": "mintAuthority",
              "type": {
                "kind": "optionTypeNode",
                "item": { "kind": "publicKeyTypeNode" },
                "prefix": {
                  "kind": "numberTypeNode",
                  "format": "u32",
                  "endian": "le"
                },
                "fixed": true
              },
              "docs": []
            },
            {
              "kind": "structFieldTypeNode",
              "name": "supply",
              "type": {
                "kind": "numberTypeNode",
                "format": "u64",
                "endian": "le"
              },
              "docs": []
            },
            {
              "kind": "structFieldTypeNode",
              "name": "decimals",
              "type": {
                "kind": "numberTypeNode",
                "format": "u8",
                "endian": "le"
              },
              "docs": []
            },
            {
              "kind": "structFieldTypeNode",
              "name": "isInitialized",
              "type": {
                "kind": "booleanTypeNode",
                "size": {
                  "kind": "numberTypeNode",
                  "format": "u8",
                  "endian": "le"
                }
              },
              "docs": []
            },
            {
              "kind": "structFieldTypeNode",
              "name": "freezeAuthority",
              "type": {
                "kind": "optionTypeNode",
                "item": { "kind": "publicKeyTypeNode" },
                "prefix": {
                  "kind": "numberTypeNode",
                  "format": "u32",
                  "endian": "le"
                },
                "fixed": true
              },
              "docs": []
            }
          ]
        },
        "name": "mint",
        "docs": [],
        "size": 82
      },
      {
        "kind": "accountNode",
        "data": {
          "kind": "structTypeNode",
          "fields": [
            {
              "kind": "structFieldTypeNode",
              "name": "mint",
              "type": { "kind": "publicKeyTypeNode" },
              "docs": []
            },
            {
              "kind": "structFieldTypeNode",
              "name": "owner",
              "type": { "kind": "publicKeyTypeNode" },
              "docs": []
            },
            {
              "kind": "structFieldTypeNode",
              "name": "amount",
              "type": {
                "kind": "numberTypeNode",
                "format": "u64",
                "endian": "le"
              },
              "docs": []
            },
            {
              "kind": "structFieldTypeNode",
              "name": "delegate",
              "type": {
                "kind": "optionTypeNode",
                "item": { "kind": "publicKeyTypeNode" },
                "prefix": {
                  "kind": "numberTypeNode",
                  "format": "u32",
                  "endian": "le"
                },
                "fixed": true
              },
              "docs": []
            },
            {
              "kind": "structFieldTypeNode",
              "name": "state",
              "type": { "kind": "definedTypeLinkNode", "name": "tokenState" },
              "docs": []
            },
            {
              "kind": "structFieldTypeNode",
              "name": "isNative",
              "type": {
                "kind": "optionTypeNode",
                "item": {
                  "kind": "numberTypeNode",
                  "format": "u64",
                  "endian": "le"
                },
                "prefix": {
                  "kind": "numberTypeNode",
                  "format": "u32",
                  "endian": "le"
                },
                "fixed": true
              },
              "docs": []
            },
            {
              "kind": "structFieldTypeNode",
              "name": "delegatedAmount",
              "type": {
                "kind": "numberTypeNode",
                "format": "u64",
                "endian": "le"
              },
              "docs": []
            },
            {
              "kind": "structFieldTypeNode",
              "name": "closeAuthority",
              "type": {
                "kind": "optionTypeNode",
                "item": { "kind": "publicKeyTypeNode" },
                "prefix": {
                  "kind": "numberTypeNode",
                  "format": "u32",
                  "endian": "le"
                },
                "fixed": true
              },
              "docs": []
            }
          ]
        },
        "name": "account",
        "docs": [],
        "size": 165
      },
      {
        "kind": "accountNode",
        "data": {
          "kind": "structTypeNode",
          "fields": [
            {
              "kind": "structFieldTypeNode",
              "name": "m",
              "type": {
                "kind": "numberTypeNode",
                "format": "u8",
                "endian": "le"
              },
              "docs": []
            },
            {
              "kind": "structFieldTypeNode",
              "name": "n",
              "type": {
                "kind": "numberTypeNode",
                "format": "u8",
                "endian": "le"
              },
              "docs": []
            },
            {
              "kind": "structFieldTypeNode",
              "name": "isInitialized",
              "type": {
                "kind": "booleanTypeNode",
                "size": {
                  "kind": "numberTypeNode",
                  "format": "u8",
                  "endian": "le"
                }
              },
              "docs": []
            },
            {
              "kind": "structFieldTypeNode",
              "name": "signers",
              "type": {
                "kind": "arrayTypeNode",
                "item": { "kind": "publicKeyTypeNode" },
                "count": { "kind": "fixedCountNode", "value": 11 }
              },
              "docs": []
            }
          ]
        },
        "name": "multisig",
        "docs": [],
        "size": 355
      }
    ],
    "instructions": [
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "mint",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": ["Token mint account."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "rent",
            "isWritable": false,
            "isSigner": false,
            "isOptional": false,
            "docs": ["Rent sysvar."],
            "defaultValue": {
              "kind": "publicKeyValueNode",
              "publicKey": "SysvarRent111111111111111111111111111111111"
            }
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 0 },
            "defaultValueStrategy": "omitted"
          },
          {
            "kind": "instructionArgumentNode",
            "name": "decimals",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": ["Number of decimals in token account amounts."]
          },
          {
            "kind": "instructionArgumentNode",
            "name": "mintAuthority",
            "type": { "kind": "publicKeyTypeNode" },
            "docs": ["Minting authority."]
          },
          {
            "kind": "instructionArgumentNode",
            "name": "freezeAuthority",
            "type": {
              "kind": "optionTypeNode",
              "item": { "kind": "publicKeyTypeNode" },
              "prefix": {
                "kind": "numberTypeNode",
                "format": "u32",
                "endian": "le"
              },
              "fixed": true
            },
            "docs": ["Optional authority that can freeze token accounts."]
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "name": "initializeMint",
        "docs": [
          "Initializes a new mint and optionally deposits all the newly minted",
          "tokens in an account.",
          "",
          "The `InitializeMint` instruction requires no signers and MUST be",
          "included within the same Transaction as the system program's",
          "`CreateAccount` instruction that creates the account being initialized.",
          "Otherwise another party can acquire ownership of the uninitialized account."
        ],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "account",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": ["The account to initialize."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "mint",
            "isWritable": false,
            "isSigner": false,
            "isOptional": false,
            "docs": ["The mint this account will be associated with."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "owner",
            "isWritable": false,
            "isSigner": false,
            "isOptional": false,
            "docs": ["The new account's owner/multisignature."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "rent",
            "isWritable": false,
            "isSigner": false,
            "isOptional": false,
            "docs": ["Rent sysvar."],
            "defaultValue": {
              "kind": "publicKeyValueNode",
              "publicKey": "SysvarRent111111111111111111111111111111111"
            }
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 1 },
            "defaultValueStrategy": "omitted"
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "name": "initializeAccount",
        "docs": [
          "Initializes a new account to hold tokens.  If this account is associated",
          "with the native mint then the token balance of the initialized account",
          "will be equal to the amount of SOL in the account. If this account is",
          "associated with another mint, that mint must be initialized before this",
          "command can succeed.",
          "",
          "The `InitializeAccount` instruction requires no signers and MUST be",
          "included within the same Transaction as the system program's",
          "`CreateAccount` instruction that creates the account being initialized.",
          "Otherwise another party can acquire ownership of the uninitialized account."
        ],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "multisig",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": ["The multisignature account to initialize."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "rent",
            "isWritable": false,
            "isSigner": false,
            "isOptional": false,
            "docs": ["Rent sysvar."],
            "defaultValue": {
              "kind": "publicKeyValueNode",
              "publicKey": "SysvarRent111111111111111111111111111111111"
            }
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 2 },
            "defaultValueStrategy": "omitted"
          },
          {
            "kind": "instructionArgumentNode",
            "name": "m",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [
              "The number of signers (M) required to validate this multisignature account."
            ]
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "remainingAccounts": [
          {
            "kind": "instructionRemainingAccountsNode",
            "value": {
              "kind": "argumentValueNode",
              "name": "signers"
            },
            "isOptional": true
          }
        ],
        "name": "initializeMultisig",
        "docs": [
          "Initializes a multisignature account with N provided signers.",
          "",
          "Multisignature accounts can used in place of any single owner/delegate",
          "accounts in any token instruction that require an owner/delegate to be",
          "present.  The variant field represents the number of signers (M)",
          "required to validate this multisignature account.",
          "",
          "The `InitializeMultisig` instruction requires no signers and MUST be",
          "included within the same Transaction as the system program's",
          "`CreateAccount` instruction that creates the account being initialized.",
          "Otherwise another party can acquire ownership of the uninitialized account."
        ],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "source",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": ["The source account."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "destination",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": ["The destination account."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "authority",
            "isWritable": false,
            "isSigner": "either",
            "isOptional": false,
            "docs": [
              "The source account's owner/delegate or its multisignature account."
            ],
            "defaultValue": { "kind": "identityValueNode" }
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 3 },
            "defaultValueStrategy": "omitted"
          },
          {
            "kind": "instructionArgumentNode",
            "name": "amount",
            "type": {
              "kind": "numberTypeNode",
              "format": "u64",
              "endian": "le"
            },
            "docs": ["The amount of tokens to transfer."]
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "remainingAccounts": [
          {
            "kind": "instructionRemainingAccountsNode",
            "value": {
              "kind": "argumentValueNode",
              "name": "multiSigners"
            },
            "isOptional": true,
            "isSigner": true
          }
        ],
        "name": "transfer",
        "docs": [
          "Transfers tokens from one account to another either directly or via a delegate.",
          "If this account is associated with the native mint then equal amounts",
          "of SOL and Tokens will be transferred to the destination account."
        ],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "source",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": ["The source account."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "delegate",
            "isWritable": false,
            "isSigner": false,
            "isOptional": false,
            "docs": ["The delegate."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "owner",
            "isWritable": false,
            "isSigner": "either",
            "isOptional": false,
            "docs": ["The source account owner or its multisignature account."]
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 4 },
            "defaultValueStrategy": "omitted"
          },
          {
            "kind": "instructionArgumentNode",
            "name": "amount",
            "type": {
              "kind": "numberTypeNode",
              "format": "u64",
              "endian": "le"
            },
            "docs": ["The amount of tokens the delegate is approved for."]
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "remainingAccounts": [
          {
            "kind": "instructionRemainingAccountsNode",
            "value": {
              "kind": "argumentValueNode",
              "name": "multiSigners"
            },
            "isOptional": true,
            "isSigner": true
          }
        ],
        "name": "approve",
        "docs": [
          "Approves a delegate. A delegate is given the authority over tokens on",
          "behalf of the source account's owner."
        ],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "source",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": ["The source account."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "owner",
            "isWritable": false,
            "isSigner": "either",
            "isOptional": false,
            "docs": ["The source account owner or its multisignature."]
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 5 },
            "defaultValueStrategy": "omitted"
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "remainingAccounts": [
          {
            "kind": "instructionRemainingAccountsNode",
            "value": {
              "kind": "argumentValueNode",
              "name": "multiSigners"
            },
            "isOptional": true,
            "isSigner": true
          }
        ],
        "name": "revoke",
        "docs": ["Revokes the delegate's authority."],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "owned",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": ["The mint or account to change the authority of."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "owner",
            "isWritable": false,
            "isSigner": "either",
            "isOptional": false,
            "docs": [
              "The current authority or the multisignature account of the mint or account to update."
            ]
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 6 },
            "defaultValueStrategy": "omitted"
          },
          {
            "kind": "instructionArgumentNode",
            "name": "authorityType",
            "type": { "kind": "definedTypeLinkNode", "name": "authorityType" },
            "docs": ["The type of authority to update."]
          },
          {
            "kind": "instructionArgumentNode",
            "name": "newAuthority",
            "type": {
              "kind": "optionTypeNode",
              "item": { "kind": "publicKeyTypeNode" },
              "prefix": {
                "kind": "numberTypeNode",
                "format": "u32",
                "endian": "le"
              },
              "fixed": true
            },
            "docs": ["The new authority"]
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "remainingAccounts": [
          {
            "kind": "instructionRemainingAccountsNode",
            "value": {
              "kind": "argumentValueNode",
              "name": "multiSigners"
            },
            "isOptional": true,
            "isSigner": true
          }
        ],
        "name": "setAuthority",
        "docs": ["Sets a new authority of a mint or account."],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "mint",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": ["The mint account."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "token",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": ["The account to mint tokens to."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "mintAuthority",
            "isWritable": false,
            "isSigner": "either",
            "isOptional": false,
            "docs": [
              "The mint's minting authority or its multisignature account."
            ]
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 7 },
            "defaultValueStrategy": "omitted"
          },
          {
            "kind": "instructionArgumentNode",
            "name": "amount",
            "type": {
              "kind": "numberTypeNode",
              "format": "u64",
              "endian": "le"
            },
            "docs": ["The amount of new tokens to mint."]
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "remainingAccounts": [
          {
            "kind": "instructionRemainingAccountsNode",
            "value": {
              "kind": "argumentValueNode",
              "name": "multiSigners"
            },
            "isOptional": true,
            "isSigner": true
          }
        ],
        "name": "mintTo",
        "docs": [
          "Mints new tokens to an account. The native mint does not support minting."
        ],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "account",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": ["The account to burn from."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "mint",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": ["The token mint."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "authority",
            "isWritable": false,
            "isSigner": "either",
            "isOptional": false,
            "docs": [
              "The account's owner/delegate or its multisignature account."
            ],
            "defaultValue": { "kind": "identityValueNode" }
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": ["The amount of tokens to burn."],
            "defaultValue": { "kind": "numberValueNode", "number": 8 },
            "defaultValueStrategy": "omitted"
          },
          {
            "kind": "instructionArgumentNode",
            "name": "amount",
            "type": {
              "kind": "numberTypeNode",
              "format": "u64",
              "endian": "le"
            },
            "docs": []
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "remainingAccounts": [
          {
            "kind": "instructionRemainingAccountsNode",
            "value": {
              "kind": "argumentValueNode",
              "name": "multiSigners"
            },
            "isOptional": true,
            "isSigner": true
          }
        ],
        "name": "burn",
        "docs": [
          "Burns tokens by removing them from an account. `Burn` does not support",
          "accounts associated with the native mint, use `CloseAccount` instead."
        ],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "account",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": ["The account to close."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "destination",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": ["The destination account."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "owner",
            "isWritable": false,
            "isSigner": "either",
            "isOptional": false,
            "docs": ["The account's owner or its multisignature account."]
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 9 },
            "defaultValueStrategy": "omitted"
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "remainingAccounts": [
          {
            "kind": "instructionRemainingAccountsNode",
            "value": {
              "kind": "argumentValueNode",
              "name": "multiSigners"
            },
            "isOptional": true,
            "isSigner": true
          }
        ],
        "name": "closeAccount",
        "docs": [
          "Close an account by transferring all its SOL to the destination account.",
          "Non-native accounts may only be closed if its token amount is zero."
        ],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "account",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": ["The account to freeze."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "mint",
            "isWritable": false,
            "isSigner": false,
            "isOptional": false,
            "docs": ["The token mint."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "owner",
            "isWritable": false,
            "isSigner": "either",
            "isOptional": false,
            "docs": ["The mint freeze authority or its multisignature account."]
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 10 },
            "defaultValueStrategy": "omitted"
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "remainingAccounts": [
          {
            "kind": "instructionRemainingAccountsNode",
            "value": {
              "kind": "argumentValueNode",
              "name": "multiSigners"
            },
            "isOptional": true,
            "isSigner": true
          }
        ],
        "name": "freezeAccount",
        "docs": [
          "Freeze an Initialized account using the Mint's freeze_authority (if set)."
        ],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "account",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": ["The account to thaw."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "mint",
            "isWritable": false,
            "isSigner": false,
            "isOptional": false,
            "docs": ["The token mint."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "owner",
            "isWritable": false,
            "isSigner": "either",
            "isOptional": false,
            "docs": ["The mint freeze authority or its multisignature account."]
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 11 },
            "defaultValueStrategy": "omitted"
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "remainingAccounts": [
          {
            "kind": "instructionRemainingAccountsNode",
            "value": {
              "kind": "argumentValueNode",
              "name": "multiSigners"
            },
            "isOptional": true,
            "isSigner": true
          }
        ],
        "name": "thawAccount",
        "docs": [
          "Thaw a Frozen account using the Mint's freeze_authority (if set)."
        ],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "source",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": ["The source account."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "mint",
            "isWritable": false,
            "isSigner": false,
            "isOptional": false,
            "docs": ["The token mint."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "destination",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": ["The destination account."]
          },
          {
            "kind": "instructionAccountNode",
            "name": "authority",
            "isWritable": false,
            "isSigner": "either",
            "isOptional": false,
            "docs": [
              "The source account's owner/delegate or its multisignature account."
            ],
            "defaultValue": { "kind": "identityValueNode" }
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 12 },
            "defaultValueStrategy": "omitted"
          },
          {
            "kind": "instructionArgumentNode",
            "name": "amount",
            "type": {
              "kind": "numberTypeNode",
              "format": "u64",
              "endian": "le"
            },
            "docs": ["The amount of tokens to transfer."]
          },
          {
            "kind": "instructionArgumentNode",
            "name": "decimals",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [
              "Expected number of base 10 digits to the right of the decimal place."
            ]
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "remainingAccounts": [
          {
            "kind": "instructionRemainingAccountsNode",
            "value": {
              "kind": "argumentValueNode",
              "name": "multiSigners"
            },
            "isOptional": true,
            "isSigner": true
          }
        ],
        "name": "transferChecked",
        "docs": [
          "Transfers tokens from one account to another either directly or via a",
          "delegate. If this account is associated with the native mint then equal",
          "amounts of SOL and Tokens will be transferred to the destination account.",
          "",
          "This instruction differs from Transfer in that the token mint and",
          "decimals value is checked by the caller. This may be useful when",
          "creating transactions offline or within a hardware wallet."
        ],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "source",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": []
          },
          {
            "kind": "instructionAccountNode",
            "name": "mint",
            "isWritable": false,
            "isSigner": false,
            "isOptional": false,
            "docs": []
          },
          {
            "kind": "instructionAccountNode",
            "name": "delegate",
            "isWritable": false,
            "isSigner": false,
            "isOptional": false,
            "docs": []
          },
          {
            "kind": "instructionAccountNode",
            "name": "owner",
            "isWritable": false,
            "isSigner": true,
            "isOptional": false,
            "docs": []
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 13 },
            "defaultValueStrategy": "omitted"
          },
          {
            "kind": "instructionArgumentNode",
            "name": "amount",
            "type": {
              "kind": "numberTypeNode",
              "format": "u64",
              "endian": "le"
            },
            "docs": []
          },
          {
            "kind": "instructionArgumentNode",
            "name": "decimals",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": []
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "name": "approveChecked",
        "docs": [],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "mint",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": []
          },
          {
            "kind": "instructionAccountNode",
            "name": "token",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": []
          },
          {
            "kind": "instructionAccountNode",
            "name": "mintAuthority",
            "isWritable": false,
            "isSigner": true,
            "isOptional": false,
            "docs": []
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 14 },
            "defaultValueStrategy": "omitted"
          },
          {
            "kind": "instructionArgumentNode",
            "name": "amount",
            "type": {
              "kind": "numberTypeNode",
              "format": "u64",
              "endian": "le"
            },
            "docs": []
          },
          {
            "kind": "instructionArgumentNode",
            "name": "decimals",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": []
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "name": "mintTokensToChecked",
        "docs": [],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "account",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": []
          },
          {
            "kind": "instructionAccountNode",
            "name": "mint",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": []
          },
          {
            "kind": "instructionAccountNode",
            "name": "authority",
            "isWritable": false,
            "isSigner": true,
            "isOptional": false,
            "docs": [],
            "defaultValue": { "kind": "identityValueNode" }
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 15 },
            "defaultValueStrategy": "omitted"
          },
          {
            "kind": "instructionArgumentNode",
            "name": "amount",
            "type": {
              "kind": "numberTypeNode",
              "format": "u64",
              "endian": "le"
            },
            "docs": []
          },
          {
            "kind": "instructionArgumentNode",
            "name": "decimals",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": []
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "name": "burnChecked",
        "docs": [],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "account",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": []
          },
          {
            "kind": "instructionAccountNode",
            "name": "mint",
            "isWritable": false,
            "isSigner": false,
            "isOptional": false,
            "docs": []
          },
          {
            "kind": "instructionAccountNode",
            "name": "rent",
            "isWritable": false,
            "isSigner": false,
            "isOptional": false,
            "docs": [],
            "defaultValue": {
              "kind": "publicKeyValueNode",
              "publicKey": "SysvarRent111111111111111111111111111111111"
            }
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 16 },
            "defaultValueStrategy": "omitted"
          },
          {
            "kind": "instructionArgumentNode",
            "name": "owner",
            "type": { "kind": "publicKeyTypeNode" },
            "docs": []
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "name": "initializeAccount2",
        "docs": [],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "account",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": []
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 17 },
            "defaultValueStrategy": "omitted"
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "name": "syncNative",
        "docs": [],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "account",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": []
          },
          {
            "kind": "instructionAccountNode",
            "name": "mint",
            "isWritable": false,
            "isSigner": false,
            "isOptional": false,
            "docs": []
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 18 },
            "defaultValueStrategy": "omitted"
          },
          {
            "kind": "instructionArgumentNode",
            "name": "owner",
            "type": { "kind": "publicKeyTypeNode" },
            "docs": []
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "name": "initializeAccount3",
        "docs": [],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "multisig",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": []
          },
          {
            "kind": "instructionAccountNode",
            "name": "signer",
            "isWritable": false,
            "isSigner": false,
            "isOptional": false,
            "docs": []
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 19 },
            "defaultValueStrategy": "omitted"
          },
          {
            "kind": "instructionArgumentNode",
            "name": "m",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": []
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "name": "initializeMultisig2",
        "docs": [],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "mint",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": []
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 20 },
            "defaultValueStrategy": "omitted"
          },
          {
            "kind": "instructionArgumentNode",
            "name": "decimals",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": []
          },
          {
            "kind": "instructionArgumentNode",
            "name": "mintAuthority",
            "type": { "kind": "publicKeyTypeNode" },
            "docs": []
          },
          {
            "kind": "instructionArgumentNode",
            "name": "freezeAuthority",
            "type": {
              "kind": "optionTypeNode",
              "item": { "kind": "publicKeyTypeNode" },
              "prefix": {
                "kind": "numberTypeNode",
                "format": "u8",
                "endian": "le"
              },
              "fixed": false
            },
            "docs": []
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "name": "initializeMint2",
        "docs": [],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "mint",
            "isWritable": false,
            "isSigner": false,
            "isOptional": false,
            "docs": []
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 21 },
            "defaultValueStrategy": "omitted"
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "name": "getTokenDataSize",
        "docs": [],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "account",
            "isWritable": true,
            "isSigner": false,
            "isOptional": false,
            "docs": []
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 22 },
            "defaultValueStrategy": "omitted"
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "name": "initializeImmutableOwner",
        "docs": [],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "mint",
            "isWritable": false,
            "isSigner": false,
            "isOptional": false,
            "docs": []
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 23 },
            "defaultValueStrategy": "omitted"
          },
          {
            "kind": "instructionArgumentNode",
            "name": "amount",
            "type": {
              "kind": "numberTypeNode",
              "format": "u64",
              "endian": "le"
            },
            "docs": []
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "name": "amountToUiAmount",
        "docs": [],
        "optionalAccountStrategy": "programId"
      },
      {
        "kind": "instructionNode",
        "accounts": [
          {
            "kind": "instructionAccountNode",
            "name": "mint",
            "isWritable": false,
            "isSigner": false,
            "isOptional": false,
            "docs": []
          }
        ],
        "arguments": [
          {
            "kind": "instructionArgumentNode",
            "name": "discriminator",
            "type": {
              "kind": "numberTypeNode",
              "format": "u8",
              "endian": "le"
            },
            "docs": [],
            "defaultValue": { "kind": "numberValueNode", "number": 24 },
            "defaultValueStrategy": "omitted"
          },
          {
            "kind": "instructionArgumentNode",
            "name": "uiAmount",
            "type": {
              "kind": "numberTypeNode",
              "format": "u64",
              "endian": "le"
            },
            "docs": []
          }
        ],
        "discriminators": [
          {
            "kind": "fieldDiscriminatorNode",
            "name": "discriminator",
            "offset": 0
          }
        ],
        "name": "uiAmountToAmount",
        "docs": [],
        "optionalAccountStrategy": "programId"
      }
    ],
    "definedTypes": [
      {
        "kind": "definedTypeNode",
        "name": "tokenState",
        "type": {
          "kind": "enumTypeNode",
          "variants": [
            { "kind": "enumEmptyVariantTypeNode", "name": "uninitialized" },
            { "kind": "enumEmptyVariantTypeNode", "name": "initialized" },
            { "kind": "enumEmptyVariantTypeNode", "name": "frozen" }
          ],
          "size": { "kind": "numberTypeNode", "format": "u8", "endian": "le" }
        },
        "docs": []
      },
      {
        "kind": "definedTypeNode",
        "name": "authorityType",
        "type": {
          "kind": "enumTypeNode",
          "variants": [
            { "kind": "enumEmptyVariantTypeNode", "name": "mintTokens" },
            { "kind": "enumEmptyVariantTypeNode", "name": "freezeAccount" },
            { "kind": "enumEmptyVariantTypeNode", "name": "accountOwner" },
            { "kind": "enumEmptyVariantTypeNode", "name": "closeAccount" }
          ],
          "size": { "kind": "numberTypeNode", "format": "u8", "endian": "le" }
        },
        "docs": []
      }
    ],
    "errors": [
      {
        "kind": "errorNode",
        "name": "notRentExempt",
        "code": 0,
        "message": "Lamport balance below rent-exempt threshold",
        "docs": ["NotRentExempt: Lamport balance below rent-exempt threshold"]
      },
      {
        "kind": "errorNode",
        "name": "insufficientFunds",
        "code": 1,
        "message": "Insufficient funds",
        "docs": ["InsufficientFunds: Insufficient funds"]
      },
      {
        "kind": "errorNode",
        "name": "invalidMint",
        "code": 2,
        "message": "Invalid Mint",
        "docs": ["InvalidMint: Invalid Mint"]
      },
      {
        "kind": "errorNode",
        "name": "mintMismatch",
        "code": 3,
        "message": "Account not associated with this Mint",
        "docs": ["MintMismatch: Account not associated with this Mint"]
      },
      {
        "kind": "errorNode",
        "name": "ownerMismatch",
        "code": 4,
        "message": "Owner does not match",
        "docs": ["OwnerMismatch: Owner does not match"]
      },
      {
        "kind": "errorNode",
        "name": "fixedSupply",
        "code": 5,
        "message": "Fixed supply",
        "docs": ["FixedSupply: Fixed supply"]
      },
      {
        "kind": "errorNode",
        "name": "alreadyInUse",
        "code": 6,
        "message": "Already in use",
        "docs": ["AlreadyInUse: Already in use"]
      },
      {
        "kind": "errorNode",
        "name": "invalidNumberOfProvidedSigners",
        "code": 7,
        "message": "Invalid number of provided signers",
        "docs": [
          "InvalidNumberOfProvidedSigners: Invalid number of provided signers"
        ]
      },
      {
        "kind": "errorNode",
        "name": "invalidNumberOfRequiredSigners",
        "code": 8,
        "message": "Invalid number of required signers",
        "docs": [
          "InvalidNumberOfRequiredSigners: Invalid number of required signers"
        ]
      },
      {
        "kind": "errorNode",
        "name": "uninitializedState",
        "code": 9,
        "message": "State is unititialized",
        "docs": ["UninitializedState: State is unititialized"]
      },
      {
        "kind": "errorNode",
        "name": "nativeNotSupported",
        "code": 10,
        "message": "Instruction does not support native tokens",
        "docs": [
          "NativeNotSupported: Instruction does not support native tokens"
        ]
      },
      {
        "kind": "errorNode",
        "name": "nonNativeHasBalance",
        "code": 11,
        "message": "Non-native account can only be closed if its balance is zero",
        "docs": [
          "NonNativeHasBalance: Non-native account can only be closed if its balance is zero"
        ]
      },
      {
        "kind": "errorNode",
        "name": "invalidInstruction",
        "code": 12,
        "message": "Invalid instruction",
        "docs": ["InvalidInstruction: Invalid instruction"]
      },
      {
        "kind": "errorNode",
        "name": "invalidState",
        "code": 13,
        "message": "State is invalid for requested operation",
        "docs": ["InvalidState: State is invalid for requested operation"]
      },
      {
        "kind": "errorNode",
        "name": "overflow",
        "code": 14,
        "message": "Operation overflowed",
        "docs": ["Overflow: Operation overflowed"]
      },
      {
        "kind": "errorNode",
        "name": "authorityTypeNotSupported",
        "code": 15,
        "message": "Account does not support specified authority type",
        "docs": [
          "AuthorityTypeNotSupported: Account does not support specified authority type"
        ]
      },
      {
        "kind": "errorNode",
        "name": "mintCannotFreeze",
        "code": 16,
        "message": "This token mint cannot freeze accounts",
        "docs": ["MintCannotFreeze: This token mint cannot freeze accounts"]
      },
      {
        "kind": "errorNode",
        "name": "accountFrozen",
        "code": 17,
        "message": "Account is frozen",
        "docs": ["AccountFrozen: Account is frozen"]
      },
      {
        "kind": "errorNode",
        "name": "mintDecimalsMismatch",
        "code": 18,
        "message": "The provided decimals value different from the Mint decimals",
        "docs": [
          "MintDecimalsMismatch: The provided decimals value different from the Mint decimals"
        ]
      },
      {
        "kind": "errorNode",
        "name": "nonNativeNotSupported",
        "code": 19,
        "message": "Instruction does not support non-native tokens",
        "docs": [
          "NonNativeNotSupported: Instruction does not support non-native tokens"
        ]
      }
    ],
    "name": "token",
    "prefix": "",
    "publicKey": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
    "version": "3.3.0",
    "origin": "shank"
  },
  "additionalPrograms": [
    {
      "kind": "programNode",
      "pdas": [],
      "accounts": [],
      "instructions": [
        {
          "kind": "instructionNode",
          "accounts": [
            {
              "kind": "instructionAccountNode",
              "name": "payer",
              "isWritable": true,
              "isSigner": true,
              "isOptional": false,
              "docs": [],
              "defaultValue": { "kind": "payerValueNode" }
            },
            {
              "kind": "instructionAccountNode",
              "name": "ata",
              "isWritable": true,
              "isSigner": false,
              "isOptional": false,
              "docs": []
            },
            {
              "kind": "instructionAccountNode",
              "name": "owner",
              "isWritable": false,
              "isSigner": false,
              "isOptional": false,
              "docs": []
            },
            {
              "kind": "instructionAccountNode",
              "name": "mint",
              "isWritable": false,
              "isSigner": false,
              "isOptional": false,
              "docs": []
            },
            {
              "kind": "instructionAccountNode",
              "name": "systemProgram",
              "isWritable": false,
              "isSigner": false,
              "isOptional": false,
              "docs": [],
              "defaultValue": {
                "kind": "publicKeyValueNode",
                "publicKey": "11111111111111111111111111111111",
                "identifier": "splSystem"
              }
            },
            {
              "kind": "instructionAccountNode",
              "name": "tokenProgram",
              "isWritable": false,
              "isSigner": false,
              "isOptional": false,
              "docs": [],
              "defaultValue": {
                "kind": "publicKeyValueNode",
                "publicKey": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
                "identifier": "splToken"
              }
            }
          ],
          "arguments": [],
          "name": "createAssociatedToken",
          "docs": [],
          "optionalAccountStrategy": "programId"
        },
        {
          "kind": "instructionNode",
          "accounts": [
            {
              "kind": "instructionAccountNode",
              "name": "payer",
              "isWritable": true,
              "isSigner": true,
              "isOptional": false,
              "docs": [],
              "defaultValue": { "kind": "payerValueNode" }
            },
            {
              "kind": "instructionAccountNode",
              "name": "ata",
              "isWritable": true,
              "isSigner": false,
              "isOptional": false,
              "docs": []
            },
            {
              "kind": "instructionAccountNode",
              "name": "owner",
              "isWritable": false,
              "isSigner": false,
              "isOptional": false,
              "docs": []
            },
            {
              "kind": "instructionAccountNode",
              "name": "mint",
              "isWritable": false,
              "isSigner": false,
              "isOptional": false,
              "docs": []
            },
            {
              "kind": "instructionAccountNode",
              "name": "systemProgram",
              "isWritable": false,
              "isSigner": false,
              "isOptional": false,
              "docs": [],
              "defaultValue": {
                "kind": "publicKeyValueNode",
                "publicKey": "11111111111111111111111111111111",
                "identifier": "splSystem"
              }
            },
            {
              "kind": "instructionAccountNode",
              "name": "tokenProgram",
              "isWritable": false,
              "isSigner": false,
              "isOptional": false,
              "docs": [],
              "defaultValue": {
                "kind": "publicKeyValueNode",
                "publicKey": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
                "identifier": "splToken"
              }
            }
          ],
          "arguments": [],
          "name": "createIdempotentAssociatedToken",
          "docs": [],
          "optionalAccountStrategy": "programId"
        },
        {
          "kind": "instructionNode",
          "accounts": [
            {
              "kind": "instructionAccountNode",
              "name": "nestedAssociatedAccountAddress",
              "isWritable": true,
              "isSigner": false,
              "isOptional": false,
              "docs": []
            },
            {
              "kind": "instructionAccountNode",
              "name": "nestedTokenMintAddress",
              "isWritable": false,
              "isSigner": false,
              "isOptional": false,
              "docs": []
            },
            {
              "kind": "instructionAccountNode",
              "name": "destinationAssociatedAccountAddress",
              "isWritable": true,
              "isSigner": false,
              "isOptional": false,
              "docs": []
            },
            {
              "kind": "instructionAccountNode",
              "name": "ownerAssociatedAccountAddress",
              "isWritable": false,
              "isSigner": false,
              "isOptional": false,
              "docs": []
            },
            {
              "kind": "instructionAccountNode",
              "name": "ownerTokenMintAddress",
              "isWritable": false,
              "isSigner": false,
              "isOptional": false,
              "docs": []
            },
            {
              "kind": "instructionAccountNode",
              "name": "walletAddress",
              "isWritable": true,
              "isSigner": true,
              "isOptional": false,
              "docs": []
            },
            {
              "kind": "instructionAccountNode",
              "name": "tokenProgram",
              "isWritable": false,
              "isSigner": false,
              "isOptional": false,
              "docs": [],
              "defaultValue": {
                "kind": "publicKeyValueNode",
                "publicKey": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
                "identifier": "splToken"
              }
            }
          ],
          "arguments": [],
          "name": "recoverNestedAssociatedToken",
          "docs": [],
          "optionalAccountStrategy": "programId"
        }
      ],
      "definedTypes": [],
      "errors": [
        {
          "kind": "errorNode",
          "name": "invalidOwner",
          "code": 0,
          "message": "Associated token account owner does not match address derivation",
          "docs": [
            "InvalidOwner: Associated token account owner does not match address derivation"
          ]
        }
      ],
      "name": "associatedToken",
      "prefix": "",
      "publicKey": "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL",
      "version": "1.1.1",
      "origin": "shank"
    }
  ],
  "standard": "kinobi",
  "version": "0.19.0"
}
