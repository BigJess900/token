/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  Option,
  OptionOrNullable,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
} from '@solana/web3.js';
import {
  TokenState,
  TokenStateArgs,
  getTokenStateDecoder,
  getTokenStateEncoder,
} from '../types';

export type Account = {
  mint: Address;
  owner: Address;
  amount: bigint;
  delegate: Option<Address>;
  state: TokenState;
  isNative: Option<bigint>;
  delegatedAmount: bigint;
  closeAuthority: Option<Address>;
};

export type AccountArgs = {
  mint: Address;
  owner: Address;
  amount: number | bigint;
  delegate: OptionOrNullable<Address>;
  state: TokenStateArgs;
  isNative: OptionOrNullable<number | bigint>;
  delegatedAmount: number | bigint;
  closeAuthority: OptionOrNullable<Address>;
};

export function getAccountEncoder(): Encoder<AccountArgs> {
  return getStructEncoder([
    ['mint', getAddressEncoder()],
    ['owner', getAddressEncoder()],
    ['amount', getU64Encoder()],
    [
      'delegate',
      getOptionEncoder(getAddressEncoder(), {
        prefix: getU32Encoder(),
        fixed: true,
      }),
    ],
    ['state', getTokenStateEncoder()],
    [
      'isNative',
      getOptionEncoder(getU64Encoder(), {
        prefix: getU32Encoder(),
        fixed: true,
      }),
    ],
    ['delegatedAmount', getU64Encoder()],
    [
      'closeAuthority',
      getOptionEncoder(getAddressEncoder(), {
        prefix: getU32Encoder(),
        fixed: true,
      }),
    ],
  ]);
}

export function getAccountDecoder(): Decoder<Account> {
  return getStructDecoder([
    ['mint', getAddressDecoder()],
    ['owner', getAddressDecoder()],
    ['amount', getU64Decoder()],
    [
      'delegate',
      getOptionDecoder(getAddressDecoder(), {
        prefix: getU32Decoder(),
        fixed: true,
      }),
    ],
    ['state', getTokenStateDecoder()],
    [
      'isNative',
      getOptionDecoder(getU64Decoder(), {
        prefix: getU32Decoder(),
        fixed: true,
      }),
    ],
    ['delegatedAmount', getU64Decoder()],
    [
      'closeAuthority',
      getOptionDecoder(getAddressDecoder(), {
        prefix: getU32Decoder(),
        fixed: true,
      }),
    ],
  ]);
}

export function getAccountCodec(): Codec<AccountArgs, Account> {
  return combineCodec(getAccountEncoder(), getAccountDecoder());
}

export function decodeAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Account, TAddress>;
export function decodeAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Account, TAddress>;
export function decodeAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Account, TAddress> | MaybeAccount<Account, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAccountDecoder()
  );
}

export async function fetchAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Account, TAddress>> {
  const maybeAccount = await fetchMaybeAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Account, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAccount(maybeAccount);
}

export async function fetchAllAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Account>[]> {
  const maybeAccounts = await fetchAllMaybeAccount(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Account>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeAccount(maybeAccount));
}

export function getAccountSize(): number {
  return 165;
}
